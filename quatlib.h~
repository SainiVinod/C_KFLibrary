#ifndef QUATLIB_H
#define QUATLIB_H

/*_____________________________Quat to Rotation_________________________ */
void Quat2Rot(const float *quat, float *rotMat);

/*_______________________ Rotation to Euler Angles________________________*/
void Rot2Euler(const float *rotMat, float *eulerAngles);

/*_______________________Quaternion Multiplication________________________ */
void QuatMultiply(const float *ipVec1, const float *ipVec2, float *opVec);

/*_______________________Euler to Quaternion______________________________ */
void Euler2Quat(const float angle[], float *quat);

/*________________ Rodrigues Representation to Quaternion_________________ */
void Rodrigues(const float *rodrigus, float *quat);

/*________________ Euler Integration Quaternion____________________________ */
IntegrateEuler(void);


/* Euler Integration Quaternion */
void IntegrateEuler(const float *quat_prv, const float *omega, const float dt, float *quat_updated){
	float omega_quat[4][1] = {{0.0}, {*(omega)}, {*(omega+1)}, {*(omega+2)}};
  QuatMultiply((float *) quat_prv, (float *) omega_quat, (float *) quat_updated);
  *(quat_updated)   = *(quat_prv) + 0.5 * dt * (*(quat_updated));
  *(quat_updated+1) = *(quat_prv+1)+ 0.5 * dt * (*(quat_updated+1));
  *(quat_updated+2) = *(quat_prv+2)+ 0.5 * dt * (*(quat_updated+2));
  *(quat_updated+3) = *(quat_prv+3)+ 0.5 * dt * (*(quat_updated+3));

}
#endif
